import {TextStyle} from 'react-native';
import {hdp,wdp} from '../utility/utility'
 
const getFonts = (fontFamily: string, fontSize: number): TextStyle => ({
    fontFamily,
    fontSize,
  });

  const Fonts = {
    //bold
    robotoTextBold8: getFonts('Roboto-Bold', 8),
    robotoTextBold9: getFonts('Roboto-Bold', 9),
    robotoTextBold10: getFonts('Roboto-Bold', 10),
    robotoTextBold11: getFonts('Roboto-Bold', 11),
    robotoTextBold12: getFonts('Roboto-Bold', 12),
    robotoTextBold13: getFonts('Roboto-Bold', 13),
    robotoTextBold14: getFonts('Roboto-Bold', 14),
    robotoTextBold15: getFonts('Roboto-Bold', 15),
    robotoTextBold16: getFonts('Roboto-Bold', 16),
    robotoTextBold17: getFonts('Roboto-Bold', 17),
    robotoTextBold18: getFonts('Roboto-Bold', 18),
    robotoTextBold19: getFonts('Roboto-Bold', 19),
    robotoTextBold20: getFonts('Roboto-Bold', 20),
    robotoTextBold21: getFonts('Roboto-Bold', 21),
    robotoTextBold22: getFonts('Roboto-Bold', 22),
    robotoTextBold23: getFonts('Roboto-Bold', 23),
    robotoTextBold24: getFonts('Roboto-Bold', 24),
    //regular
    robotoTextRegular8: getFonts('Roboto-Regular', 8),
    robotoTextRegular9: getFonts('Roboto-Regular', 9),
    robotoTextRegular10: getFonts('Roboto-Regular', 10),
    robotoTextRegular11: getFonts('Roboto-Regular', 11),
    robotoTextRegular12: getFonts('Roboto-Regular', 12),
    robotoTextRegular13: getFonts('Roboto-Regular', 13),
    robotoTextRegular14: getFonts('Roboto-Regular', 14),
    robotoTextRegular15: getFonts('Roboto-Regular', 15),
    robotoTextRegular16: getFonts('Roboto-Regular', 16),
    robotoTextRegular17: getFonts('Roboto-Regular', 17),
    robotoTextRegular18: getFonts('Roboto-Regular', 18),
    robotoTextRegular19: getFonts('Roboto-Regular', 19),
    robotoTextRegular20: getFonts('Roboto-Regular', 20),
    robotoTextRegular21: getFonts('Roboto-Regular', 21),
    robotoTextRegular22: getFonts('Roboto-Regular', 22),
    robotoTextRegular23: getFonts('Roboto-Regular', 23),
    robotoTextRegular24: getFonts('Roboto-Regular', 24),
    //medium
    robotoTextMedium8: getFonts('Roboto-Medium', 8),
    robotoTextMedium9: getFonts('Roboto-Medium', 9),
    robotoTextMedium10: getFonts('Roboto-Medium', 10),
    robotoTextMedium11: getFonts('Roboto-Medium', 11),
    robotoTextMedium12: getFonts('Roboto-Medium', 12),
    robotoTextMedium13: getFonts('Roboto-Medium', 13),
    robotoTextMedium14: getFonts('Roboto-Medium', 14),
    robotoTextMedium15: getFonts('Roboto-Medium', 15),
    robotoTextMedium16: getFonts('Roboto-Medium', 16),
    robotoTextMedium17: getFonts('Roboto-Medium', 17),
    robotoTextMedium18: getFonts('Roboto-Medium', 18),
    robotoTextMedium19: getFonts('Roboto-Medium', 19),
    robotoTextMedium20: getFonts('Roboto-Medium', 20),
    robotoTextMedium21: getFonts('Roboto-Medium', 21),
    robotoTextMedium22: getFonts('Roboto-Medium', 22),
    robotoTextMedium23: getFonts('Roboto-Medium', 23),
    robotoTextMedium24: getFonts('Roboto-Medium', 24),
    //semi bold
  
    robotoTextLight8: getFonts('Roboto-Light', 8),
    robotoTextLight9: getFonts('Roboto-Light', 9),
    robotoTextLight10: getFonts('Roboto-Light', 10),
    robotoTextLight11: getFonts('Roboto-Light', 11),
    robotoTextLight12: getFonts('Roboto-Light', 12),
    robotoTextLight13: getFonts('Roboto-Light', 13),
    robotoTextLight14: getFonts('Roboto-Light', 14),
    robotoTextLight15: getFonts('Roboto-Light', 15),
    robotoTextLight16: getFonts('Roboto-Light', 16),
    robotoTextLight17: getFonts('Roboto-Light', 17),
    robotoTextLight18: getFonts('Roboto-Light', 18),
    robotoTextLight19: getFonts('Roboto-Light', 19),
    robotoTextLight20: getFonts('Roboto-Light', 20),
    robotoTextLight21: getFonts('Roboto-Light', 21),
    robotoTextLight22: getFonts('Roboto-Light', 22),
    robotoTextLight23: getFonts('Roboto-Light', 23),
    robotoTextLight24: getFonts('Roboto-Light', 24),
  
  
    robotoTextBlack8: getFonts('Roboto-Black', 8),
    robotoTextBlack9: getFonts('Roboto-Black', 9),
    robotoTextBlack10: getFonts('Roboto-Black', 10),
    robotoTextBlack11: getFonts('Roboto-Black', 11),
    robotoTextBlack12: getFonts('Roboto-Black', 12),
    robotoTextBlack13: getFonts('Roboto-Black', 13),
    robotoTextBlack14: getFonts('Roboto-Black', 14),
    robotoTextBlack15: getFonts('Roboto-Black', 15),
    robotoTextBlack16: getFonts('Roboto-Black', 16),
    robotoTextBlack17: getFonts('Roboto-Black', 17),
    robotoTextBlack18: getFonts('Roboto-Black', 18),
    robotoTextBlack19: getFonts('Roboto-Black', 19),
    robotoTextBlack20: getFonts('Roboto-Black', 20),
    robotoTextBlack21: getFonts('Roboto-Black', 21),
    robotoTextBlack22: getFonts('Roboto-Black', 22),
    robotoTextBlack23: getFonts('Roboto-Black', 23),
    robotoTextBlack24: getFonts('Roboto-Black', 24),
  
    robotoTextThin8: getFonts('Roboto-Thin', 8),
    robotoTextThin9: getFonts('Roboto-Thin', 9),
    robotoTextThin10: getFonts('Roboto-Thin', 10),
    robotoTextThin11: getFonts('Roboto-Thin', 11),
    robotoTextThin12: getFonts('Roboto-Thin', 12),
    robotoTextThin13: getFonts('Roboto-Thin', 13),
    robotoTextThin14: getFonts('Roboto-Thin', 14),
    robotoTextThin15: getFonts('Roboto-Thin', 15),
    robotoTextThin16: getFonts('Roboto-Thin', 16),
    robotoTextThin17: getFonts('Roboto-Thin', 17),
    robotoTextThin18: getFonts('Roboto-Thin', 18),
    robotoTextThin19: getFonts('Roboto-Thin', 19),
    robotoTextThin20: getFonts('Roboto-Thin', 20),
    robotoTextThin21: getFonts('Roboto-Thin', 21),
    robotoTextThin22: getFonts('Roboto-Thin', 22),
    robotoTextThin23: getFonts('Roboto-Thin', 23),
    robotoTextThin24: getFonts('Roboto-Thin', 24),
    
  };

  const Colors = {
    primary: '#03989F',
    secondary: '#E7FEFF',
    indigo: '#2A2F5A',
    darkCharcoal: '#333333',
    white: '#FFFFFF',
    spanishGray: '#999999',
    silverSand: '#C2C2C2',
    virdianGreen: '#03989F',
    darkSilver: '#707070',
    lotion: '#FDFDFD',
    black: '#000000',
    aeroBlue: '#CCECDB',
    aeroBlue1: '#D2FFD1',
    quartz: '#4B4B4B',
    purpleTaupe: '#4B4444',
    chineseWhite: '#E0E0E0',
  
    erieBlack: "#1C1C1E",
    
    whiteTint: "#F2F2F7",
    phillipineGrey: "#919194",
    antiFlashWhite: "#F2F2F7",
    aztecGold: "#C6A055",
    lineSeparator: "#b5b5b7",
    lightGrey: "#3C3C43",
    tuftsBlue: "#3E94E1",
    lightSkyBlue: "#8DC5FF",
    brightGray: "#ECECEC",
    myrtleGreen: "#386D67",
    tintGrey: "#D9D9D9",
    yellow: "#FFE70E",
    red: "#e31b23",
    yaleBlue: "#1B5690",
    urlLink: "#0000EE",
    green: "#075936",
    mante:'#959CA1'
  };
  
  const Spacing = {
    app_horizontal: wdp(3),
    textinput_horizontal: Math.round(wdp(4)),
    textinput_vertical: hdp(2.5),
    home_item_card_horizontal: wdp(1),
    vertical_section: hdp(1.5),
    item_padding_horizontal: wdp(3),
    appVertical: hdp(1.35),
  };
  const Size = {
    nexus_button_height: Math.round(hdp(6.5)),
    nexus_textinput_height: Math.round(hdp(6.3)),
    global_icon_size: wdp(4),
    cancel_icon_size: Math.round(wdp(7)),
    header_height: Math.round(hdp(8)),
    header_icon_size: wdp(5.5),
    icon_placeholder_size: Math.round(wdp(7)),
    home_item_card_width: wdp(87),
    otp_input_size: hdp(5),
    tab_bar_height: hdp(7),
    announcement_card_width: wdp(100) - Spacing.app_horizontal * 2,
    forward_icon_size: wdp(8),
    video_container_width: wdp(100) - (Spacing.app_horizontal * 2),
    pauseBtn: wdp(17),
    universal_padding_vertical: hdp(5),
    stats_container_width: wdp(80),
    stats_container_height: hdp(25),
    stats_row_height: hdp(25) / 5,
    media_control_button: wdp(20),
    notification_card_height: 80
  };
  
  const regex = {
    emailAddress: new RegExp(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    ),
    // password: /^(?=.[a-z])(?=.[A-Z])(?=.\d)(?=.[@$!%?&])[A-Za-z\d@$!%?&]{8,}$/,
    password: /^(?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\W).*$/,
    // phoneNumber:/^[6-9]\d{9}$/,
    mobileNumber: /^(\+91[\\-\s]?)?[0]?(91)?[6789]\d{9}$/,
    fullName: /^[a-zA-Z][a-zA-Z ]*$/,
    // eslint-disable-next-line no-useless-escape
    // userName: /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)\.[a-z]{2,5}(:[0-9]{1,5})?(\/.)?$/,
    specialNotAccept: /[\s#.,-]/,
  };

  export {Fonts, Colors,Spacing,Size,regex};
  